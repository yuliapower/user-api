plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.openapi.generator' version '6.3.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.18.1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:1.5.3.Final"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	runtimeOnly 'org.postgresql:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

openApiGenerate {
	inputSpec = "$project.rootDir/src/main/resources/openapi/api-docs.yml".toString()
	outputDir = "$buildDir/generated/api" as Object
	generateModelDocumentation = true
	generatorName = "spring"
	library = "spring-boot"
	apiPackage = "com.example.userapi.controller"
	modelPackage = "com.example.userapi.model"
	invokerPackage = "com.example.userapi.api"
	configOptions = [
			useSpringBoot3: "true",
			useTags: "true",
			java8: "false",
			dateLibrary: "java8",
			interfaceOnly: "true",
			skipDefaultInterface: "true",
			hideGenerationTimestamp: "true",
			serializableModel: "true",
			booleanGetterPrefix: "is",
			openApiNullable: "true",
	]
}

sourceSets {
	main {
		java {
			srcDir("$buildDir/generated/api/src/main/java")
		}
	}
}

tasks.compileJava {
	dependsOn(tasks.openApiGenerate)
}

tasks.named('test') {
	useJUnitPlatform()
}
